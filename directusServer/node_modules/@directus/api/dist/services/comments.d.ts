import type { Comment, Item, PrimaryKey, Query } from '@directus/types';
import type { AbstractServiceOptions, MutationOptions } from '../types/index.js';
import { ActivityService } from './activity.js';
import { ItemsService, type QueryOptions } from './items.js';
import { NotificationsService } from './notifications.js';
import { UsersService } from './users.js';
type serviceOrigin = 'activity' | 'comments';
export declare class CommentsService extends ItemsService {
    activityService: ActivityService;
    notificationsService: NotificationsService;
    usersService: UsersService;
    serviceOrigin: serviceOrigin;
    constructor(options: AbstractServiceOptions & {
        serviceOrigin: serviceOrigin;
    });
    readOne(key: PrimaryKey, query?: Query, opts?: QueryOptions): Promise<Item>;
    readByQuery(query: Query, opts?: QueryOptions): Promise<Item[]>;
    readMany(keys: PrimaryKey[], query?: Query, opts?: QueryOptions): Promise<Item[]>;
    createOne(data: Partial<Comment>, opts?: MutationOptions): Promise<PrimaryKey>;
    updateByQuery(query: Query, data: Partial<Item>, opts?: MutationOptions): Promise<PrimaryKey[]>;
    updateMany(keys: PrimaryKey[], data: Partial<Item>, opts?: MutationOptions): Promise<PrimaryKey[]>;
    updateOne(key: PrimaryKey, data: Partial<Item>, opts?: MutationOptions): Promise<PrimaryKey>;
    deleteByQuery(query: Query, opts?: MutationOptions): Promise<PrimaryKey[]>;
    deleteMany(keys: PrimaryKey[], opts?: MutationOptions): Promise<PrimaryKey[]>;
    deleteOne(key: PrimaryKey, opts?: MutationOptions): Promise<PrimaryKey>;
    private processPrimaryKeys;
    migrateLegacyComment(activityPk: PrimaryKey): Promise<PrimaryKey>;
    generateQuery(type: serviceOrigin, originalQuery: Query): Query;
    private sortLegacyResults;
}
export {};
